#!/usr/bin/env node

const express = require('express')
const next = require('next')
const LRUCache = require('lru-cache')

const dev = process.env.NODE_ENV !== 'production'
const app = next({dev})
const handle = app.getRequestHandler()

const ssrCache = new LRUCache({
  max: 100,
  maxAge: 0 // never expire
})

app.prepare()
.then(() => {
  const server = express()

  server.post('/_update', (req, res) => {
    ssrCache.reset()
    res.sendStatus(200)
  })

  server.get('*', (req, res) => {
    // don't render files
    if (req.accepts('html') && req.path.indexOf('.') === -1) {
      renderAndCache(req, res)
    } else {
      return handle(req, res)
    }
  })

  server.listen(3000, err => {
    if (err) throw err
    console.log('> Ready on http://localhost:3000')
  })
})

function getCacheKey (req) {
  return `${req.url}`
}

function renderAndCache (req, res) {
  const key = getCacheKey(req)

  if (ssrCache.has(key)) {
    res.send(ssrCache.get(key))
    return
  }

  app.renderToHTML(req, res, req.path, req.query)
    .then(html => {
      ssrCache.set(key, html)
      res.send(html)
    })
    .catch(err => {
      app.renderError(err, req, res, req.path, req.query)
    })
}
